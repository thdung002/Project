/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package connectDB;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * The first thing to know about are types. The available types in Thrift are:
 * 
 *  bool        Boolean, one byte
 *  i8 (byte)   Signed 8-bit integer
 *  i16         Signed 16-bit integer
 *  i32         Signed 32-bit integer
 *  i64         Signed 64-bit integer
 *  double      64-bit floating point value
 *  string      String
 *  binary      Blob (byte array)
 *  map<t1,t2>  Map from one type to another
 *  list<t1>    Ordered list of one type
 *  set<t1>     Set of unique elements of one type
 * 
 * Did you also notice that Thrift supports C style comments?
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-03-11")
public class sale implements org.apache.thrift.TBase<sale, sale._Fields>, java.io.Serializable, Cloneable, Comparable<sale> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sale");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PLANE_FIELD_DESC = new org.apache.thrift.protocol.TField("plane", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField STARTS_FIELD_DESC = new org.apache.thrift.protocol.TField("starts", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ENDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ends", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ID_PLANE_FIELD_DESC = new org.apache.thrift.protocol.TField("id_plane", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new saleStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new saleTupleSchemeFactory();

  public int id; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String date; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String plane; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String starts; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String ends; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String id_plane; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    DATE((short)2, "date"),
    PLANE((short)3, "plane"),
    STARTS((short)4, "starts"),
    ENDS((short)5, "ends"),
    ID_PLANE((short)6, "id_plane");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // DATE
          return DATE;
        case 3: // PLANE
          return PLANE;
        case 4: // STARTS
          return STARTS;
        case 5: // ENDS
          return ENDS;
        case 6: // ID_PLANE
          return ID_PLANE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLANE, new org.apache.thrift.meta_data.FieldMetaData("plane", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STARTS, new org.apache.thrift.meta_data.FieldMetaData("starts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENDS, new org.apache.thrift.meta_data.FieldMetaData("ends", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID_PLANE, new org.apache.thrift.meta_data.FieldMetaData("id_plane", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sale.class, metaDataMap);
  }

  public sale() {
  }

  public sale(
    int id,
    java.lang.String date,
    java.lang.String plane,
    java.lang.String starts,
    java.lang.String ends,
    java.lang.String id_plane)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.date = date;
    this.plane = plane;
    this.starts = starts;
    this.ends = ends;
    this.id_plane = id_plane;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public sale(sale other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetDate()) {
      this.date = other.date;
    }
    if (other.isSetPlane()) {
      this.plane = other.plane;
    }
    if (other.isSetStarts()) {
      this.starts = other.starts;
    }
    if (other.isSetEnds()) {
      this.ends = other.ends;
    }
    if (other.isSetId_plane()) {
      this.id_plane = other.id_plane;
    }
  }

  public sale deepCopy() {
    return new sale(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.date = null;
    this.plane = null;
    this.starts = null;
    this.ends = null;
    this.id_plane = null;
  }

  public int getId() {
    return this.id;
  }

  public sale setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDate() {
    return this.date;
  }

  public sale setDate(@org.apache.thrift.annotation.Nullable java.lang.String date) {
    this.date = date;
    return this;
  }

  public void unsetDate() {
    this.date = null;
  }

  /** Returns true if field date is set (has been assigned a value) and false otherwise */
  public boolean isSetDate() {
    return this.date != null;
  }

  public void setDateIsSet(boolean value) {
    if (!value) {
      this.date = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPlane() {
    return this.plane;
  }

  public sale setPlane(@org.apache.thrift.annotation.Nullable java.lang.String plane) {
    this.plane = plane;
    return this;
  }

  public void unsetPlane() {
    this.plane = null;
  }

  /** Returns true if field plane is set (has been assigned a value) and false otherwise */
  public boolean isSetPlane() {
    return this.plane != null;
  }

  public void setPlaneIsSet(boolean value) {
    if (!value) {
      this.plane = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getStarts() {
    return this.starts;
  }

  public sale setStarts(@org.apache.thrift.annotation.Nullable java.lang.String starts) {
    this.starts = starts;
    return this;
  }

  public void unsetStarts() {
    this.starts = null;
  }

  /** Returns true if field starts is set (has been assigned a value) and false otherwise */
  public boolean isSetStarts() {
    return this.starts != null;
  }

  public void setStartsIsSet(boolean value) {
    if (!value) {
      this.starts = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getEnds() {
    return this.ends;
  }

  public sale setEnds(@org.apache.thrift.annotation.Nullable java.lang.String ends) {
    this.ends = ends;
    return this;
  }

  public void unsetEnds() {
    this.ends = null;
  }

  /** Returns true if field ends is set (has been assigned a value) and false otherwise */
  public boolean isSetEnds() {
    return this.ends != null;
  }

  public void setEndsIsSet(boolean value) {
    if (!value) {
      this.ends = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getId_plane() {
    return this.id_plane;
  }

  public sale setId_plane(@org.apache.thrift.annotation.Nullable java.lang.String id_plane) {
    this.id_plane = id_plane;
    return this;
  }

  public void unsetId_plane() {
    this.id_plane = null;
  }

  /** Returns true if field id_plane is set (has been assigned a value) and false otherwise */
  public boolean isSetId_plane() {
    return this.id_plane != null;
  }

  public void setId_planeIsSet(boolean value) {
    if (!value) {
      this.id_plane = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Integer)value);
      }
      break;

    case DATE:
      if (value == null) {
        unsetDate();
      } else {
        setDate((java.lang.String)value);
      }
      break;

    case PLANE:
      if (value == null) {
        unsetPlane();
      } else {
        setPlane((java.lang.String)value);
      }
      break;

    case STARTS:
      if (value == null) {
        unsetStarts();
      } else {
        setStarts((java.lang.String)value);
      }
      break;

    case ENDS:
      if (value == null) {
        unsetEnds();
      } else {
        setEnds((java.lang.String)value);
      }
      break;

    case ID_PLANE:
      if (value == null) {
        unsetId_plane();
      } else {
        setId_plane((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case DATE:
      return getDate();

    case PLANE:
      return getPlane();

    case STARTS:
      return getStarts();

    case ENDS:
      return getEnds();

    case ID_PLANE:
      return getId_plane();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case DATE:
      return isSetDate();
    case PLANE:
      return isSetPlane();
    case STARTS:
      return isSetStarts();
    case ENDS:
      return isSetEnds();
    case ID_PLANE:
      return isSetId_plane();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof sale)
      return this.equals((sale)that);
    return false;
  }

  public boolean equals(sale that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_date = true && this.isSetDate();
    boolean that_present_date = true && that.isSetDate();
    if (this_present_date || that_present_date) {
      if (!(this_present_date && that_present_date))
        return false;
      if (!this.date.equals(that.date))
        return false;
    }

    boolean this_present_plane = true && this.isSetPlane();
    boolean that_present_plane = true && that.isSetPlane();
    if (this_present_plane || that_present_plane) {
      if (!(this_present_plane && that_present_plane))
        return false;
      if (!this.plane.equals(that.plane))
        return false;
    }

    boolean this_present_starts = true && this.isSetStarts();
    boolean that_present_starts = true && that.isSetStarts();
    if (this_present_starts || that_present_starts) {
      if (!(this_present_starts && that_present_starts))
        return false;
      if (!this.starts.equals(that.starts))
        return false;
    }

    boolean this_present_ends = true && this.isSetEnds();
    boolean that_present_ends = true && that.isSetEnds();
    if (this_present_ends || that_present_ends) {
      if (!(this_present_ends && that_present_ends))
        return false;
      if (!this.ends.equals(that.ends))
        return false;
    }

    boolean this_present_id_plane = true && this.isSetId_plane();
    boolean that_present_id_plane = true && that.isSetId_plane();
    if (this_present_id_plane || that_present_id_plane) {
      if (!(this_present_id_plane && that_present_id_plane))
        return false;
      if (!this.id_plane.equals(that.id_plane))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetDate()) ? 131071 : 524287);
    if (isSetDate())
      hashCode = hashCode * 8191 + date.hashCode();

    hashCode = hashCode * 8191 + ((isSetPlane()) ? 131071 : 524287);
    if (isSetPlane())
      hashCode = hashCode * 8191 + plane.hashCode();

    hashCode = hashCode * 8191 + ((isSetStarts()) ? 131071 : 524287);
    if (isSetStarts())
      hashCode = hashCode * 8191 + starts.hashCode();

    hashCode = hashCode * 8191 + ((isSetEnds()) ? 131071 : 524287);
    if (isSetEnds())
      hashCode = hashCode * 8191 + ends.hashCode();

    hashCode = hashCode * 8191 + ((isSetId_plane()) ? 131071 : 524287);
    if (isSetId_plane())
      hashCode = hashCode * 8191 + id_plane.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(sale other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDate()).compareTo(other.isSetDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPlane()).compareTo(other.isSetPlane());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlane()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plane, other.plane);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStarts()).compareTo(other.isSetStarts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStarts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.starts, other.starts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEnds()).compareTo(other.isSetEnds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ends, other.ends);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetId_plane()).compareTo(other.isSetId_plane());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId_plane()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id_plane, other.id_plane);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("sale(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("date:");
    if (this.date == null) {
      sb.append("null");
    } else {
      sb.append(this.date);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("plane:");
    if (this.plane == null) {
      sb.append("null");
    } else {
      sb.append(this.plane);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("starts:");
    if (this.starts == null) {
      sb.append("null");
    } else {
      sb.append(this.starts);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ends:");
    if (this.ends == null) {
      sb.append("null");
    } else {
      sb.append(this.ends);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("id_plane:");
    if (this.id_plane == null) {
      sb.append("null");
    } else {
      sb.append(this.id_plane);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class saleStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public saleStandardScheme getScheme() {
      return new saleStandardScheme();
    }
  }

  private static class saleStandardScheme extends org.apache.thrift.scheme.StandardScheme<sale> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, sale struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.date = iprot.readString();
              struct.setDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PLANE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.plane = iprot.readString();
              struct.setPlaneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STARTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.starts = iprot.readString();
              struct.setStartsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ENDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ends = iprot.readString();
              struct.setEndsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ID_PLANE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id_plane = iprot.readString();
              struct.setId_planeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, sale struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.date != null) {
        oprot.writeFieldBegin(DATE_FIELD_DESC);
        oprot.writeString(struct.date);
        oprot.writeFieldEnd();
      }
      if (struct.plane != null) {
        oprot.writeFieldBegin(PLANE_FIELD_DESC);
        oprot.writeString(struct.plane);
        oprot.writeFieldEnd();
      }
      if (struct.starts != null) {
        oprot.writeFieldBegin(STARTS_FIELD_DESC);
        oprot.writeString(struct.starts);
        oprot.writeFieldEnd();
      }
      if (struct.ends != null) {
        oprot.writeFieldBegin(ENDS_FIELD_DESC);
        oprot.writeString(struct.ends);
        oprot.writeFieldEnd();
      }
      if (struct.id_plane != null) {
        oprot.writeFieldBegin(ID_PLANE_FIELD_DESC);
        oprot.writeString(struct.id_plane);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class saleTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public saleTupleScheme getScheme() {
      return new saleTupleScheme();
    }
  }

  private static class saleTupleScheme extends org.apache.thrift.scheme.TupleScheme<sale> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, sale struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetDate()) {
        optionals.set(1);
      }
      if (struct.isSetPlane()) {
        optionals.set(2);
      }
      if (struct.isSetStarts()) {
        optionals.set(3);
      }
      if (struct.isSetEnds()) {
        optionals.set(4);
      }
      if (struct.isSetId_plane()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetDate()) {
        oprot.writeString(struct.date);
      }
      if (struct.isSetPlane()) {
        oprot.writeString(struct.plane);
      }
      if (struct.isSetStarts()) {
        oprot.writeString(struct.starts);
      }
      if (struct.isSetEnds()) {
        oprot.writeString(struct.ends);
      }
      if (struct.isSetId_plane()) {
        oprot.writeString(struct.id_plane);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, sale struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.date = iprot.readString();
        struct.setDateIsSet(true);
      }
      if (incoming.get(2)) {
        struct.plane = iprot.readString();
        struct.setPlaneIsSet(true);
      }
      if (incoming.get(3)) {
        struct.starts = iprot.readString();
        struct.setStartsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.ends = iprot.readString();
        struct.setEndsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.id_plane = iprot.readString();
        struct.setId_planeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

