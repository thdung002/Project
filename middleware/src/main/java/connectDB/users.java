/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package connectDB;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-03-11")
public class users implements org.apache.thrift.TBase<users, users._Fields>, java.io.Serializable, Cloneable, Comparable<users> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("users");

  private static final org.apache.thrift.protocol.TField ID_SALE_FIELD_DESC = new org.apache.thrift.protocol.TField("id_sale", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FIRSTNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("Firstname", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField LASTNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("Lastname", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new usersStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new usersTupleSchemeFactory();

  public int id_sale; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String username; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String password; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String Firstname; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String Lastname; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID_SALE((short)1, "id_sale"),
    USERNAME((short)2, "username"),
    PASSWORD((short)3, "password"),
    FIRSTNAME((short)4, "Firstname"),
    LASTNAME((short)5, "Lastname");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID_SALE
          return ID_SALE;
        case 2: // USERNAME
          return USERNAME;
        case 3: // PASSWORD
          return PASSWORD;
        case 4: // FIRSTNAME
          return FIRSTNAME;
        case 5: // LASTNAME
          return LASTNAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_SALE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID_SALE, new org.apache.thrift.meta_data.FieldMetaData("id_sale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIRSTNAME, new org.apache.thrift.meta_data.FieldMetaData("Firstname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LASTNAME, new org.apache.thrift.meta_data.FieldMetaData("Lastname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(users.class, metaDataMap);
  }

  public users() {
  }

  public users(
    int id_sale,
    java.lang.String username,
    java.lang.String password,
    java.lang.String Firstname,
    java.lang.String Lastname)
  {
    this();
    this.id_sale = id_sale;
    setId_saleIsSet(true);
    this.username = username;
    this.password = password;
    this.Firstname = Firstname;
    this.Lastname = Lastname;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public users(users other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id_sale = other.id_sale;
    if (other.isSetUsername()) {
      this.username = other.username;
    }
    if (other.isSetPassword()) {
      this.password = other.password;
    }
    if (other.isSetFirstname()) {
      this.Firstname = other.Firstname;
    }
    if (other.isSetLastname()) {
      this.Lastname = other.Lastname;
    }
  }

  public users deepCopy() {
    return new users(this);
  }

  @Override
  public void clear() {
    setId_saleIsSet(false);
    this.id_sale = 0;
    this.username = null;
    this.password = null;
    this.Firstname = null;
    this.Lastname = null;
  }

  public int getId_sale() {
    return this.id_sale;
  }

  public users setId_sale(int id_sale) {
    this.id_sale = id_sale;
    setId_saleIsSet(true);
    return this;
  }

  public void unsetId_sale() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_SALE_ISSET_ID);
  }

  /** Returns true if field id_sale is set (has been assigned a value) and false otherwise */
  public boolean isSetId_sale() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_SALE_ISSET_ID);
  }

  public void setId_saleIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_SALE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUsername() {
    return this.username;
  }

  public users setUsername(@org.apache.thrift.annotation.Nullable java.lang.String username) {
    this.username = username;
    return this;
  }

  public void unsetUsername() {
    this.username = null;
  }

  /** Returns true if field username is set (has been assigned a value) and false otherwise */
  public boolean isSetUsername() {
    return this.username != null;
  }

  public void setUsernameIsSet(boolean value) {
    if (!value) {
      this.username = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPassword() {
    return this.password;
  }

  public users setPassword(@org.apache.thrift.annotation.Nullable java.lang.String password) {
    this.password = password;
    return this;
  }

  public void unsetPassword() {
    this.password = null;
  }

  /** Returns true if field password is set (has been assigned a value) and false otherwise */
  public boolean isSetPassword() {
    return this.password != null;
  }

  public void setPasswordIsSet(boolean value) {
    if (!value) {
      this.password = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getFirstname() {
    return this.Firstname;
  }

  public users setFirstname(@org.apache.thrift.annotation.Nullable java.lang.String Firstname) {
    this.Firstname = Firstname;
    return this;
  }

  public void unsetFirstname() {
    this.Firstname = null;
  }

  /** Returns true if field Firstname is set (has been assigned a value) and false otherwise */
  public boolean isSetFirstname() {
    return this.Firstname != null;
  }

  public void setFirstnameIsSet(boolean value) {
    if (!value) {
      this.Firstname = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLastname() {
    return this.Lastname;
  }

  public users setLastname(@org.apache.thrift.annotation.Nullable java.lang.String Lastname) {
    this.Lastname = Lastname;
    return this;
  }

  public void unsetLastname() {
    this.Lastname = null;
  }

  /** Returns true if field Lastname is set (has been assigned a value) and false otherwise */
  public boolean isSetLastname() {
    return this.Lastname != null;
  }

  public void setLastnameIsSet(boolean value) {
    if (!value) {
      this.Lastname = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ID_SALE:
      if (value == null) {
        unsetId_sale();
      } else {
        setId_sale((java.lang.Integer)value);
      }
      break;

    case USERNAME:
      if (value == null) {
        unsetUsername();
      } else {
        setUsername((java.lang.String)value);
      }
      break;

    case PASSWORD:
      if (value == null) {
        unsetPassword();
      } else {
        setPassword((java.lang.String)value);
      }
      break;

    case FIRSTNAME:
      if (value == null) {
        unsetFirstname();
      } else {
        setFirstname((java.lang.String)value);
      }
      break;

    case LASTNAME:
      if (value == null) {
        unsetLastname();
      } else {
        setLastname((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID_SALE:
      return getId_sale();

    case USERNAME:
      return getUsername();

    case PASSWORD:
      return getPassword();

    case FIRSTNAME:
      return getFirstname();

    case LASTNAME:
      return getLastname();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID_SALE:
      return isSetId_sale();
    case USERNAME:
      return isSetUsername();
    case PASSWORD:
      return isSetPassword();
    case FIRSTNAME:
      return isSetFirstname();
    case LASTNAME:
      return isSetLastname();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof users)
      return this.equals((users)that);
    return false;
  }

  public boolean equals(users that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id_sale = true;
    boolean that_present_id_sale = true;
    if (this_present_id_sale || that_present_id_sale) {
      if (!(this_present_id_sale && that_present_id_sale))
        return false;
      if (this.id_sale != that.id_sale)
        return false;
    }

    boolean this_present_username = true && this.isSetUsername();
    boolean that_present_username = true && that.isSetUsername();
    if (this_present_username || that_present_username) {
      if (!(this_present_username && that_present_username))
        return false;
      if (!this.username.equals(that.username))
        return false;
    }

    boolean this_present_password = true && this.isSetPassword();
    boolean that_present_password = true && that.isSetPassword();
    if (this_present_password || that_present_password) {
      if (!(this_present_password && that_present_password))
        return false;
      if (!this.password.equals(that.password))
        return false;
    }

    boolean this_present_Firstname = true && this.isSetFirstname();
    boolean that_present_Firstname = true && that.isSetFirstname();
    if (this_present_Firstname || that_present_Firstname) {
      if (!(this_present_Firstname && that_present_Firstname))
        return false;
      if (!this.Firstname.equals(that.Firstname))
        return false;
    }

    boolean this_present_Lastname = true && this.isSetLastname();
    boolean that_present_Lastname = true && that.isSetLastname();
    if (this_present_Lastname || that_present_Lastname) {
      if (!(this_present_Lastname && that_present_Lastname))
        return false;
      if (!this.Lastname.equals(that.Lastname))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + id_sale;

    hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
    if (isSetUsername())
      hashCode = hashCode * 8191 + username.hashCode();

    hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
    if (isSetPassword())
      hashCode = hashCode * 8191 + password.hashCode();

    hashCode = hashCode * 8191 + ((isSetFirstname()) ? 131071 : 524287);
    if (isSetFirstname())
      hashCode = hashCode * 8191 + Firstname.hashCode();

    hashCode = hashCode * 8191 + ((isSetLastname()) ? 131071 : 524287);
    if (isSetLastname())
      hashCode = hashCode * 8191 + Lastname.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(users other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId_sale()).compareTo(other.isSetId_sale());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId_sale()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id_sale, other.id_sale);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsername()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFirstname()).compareTo(other.isSetFirstname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirstname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Firstname, other.Firstname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLastname()).compareTo(other.isSetLastname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Lastname, other.Lastname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("users(");
    boolean first = true;

    sb.append("id_sale:");
    sb.append(this.id_sale);
    first = false;
    if (!first) sb.append(", ");
    sb.append("username:");
    if (this.username == null) {
      sb.append("null");
    } else {
      sb.append(this.username);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("password:");
    if (this.password == null) {
      sb.append("null");
    } else {
      sb.append(this.password);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Firstname:");
    if (this.Firstname == null) {
      sb.append("null");
    } else {
      sb.append(this.Firstname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Lastname:");
    if (this.Lastname == null) {
      sb.append("null");
    } else {
      sb.append(this.Lastname);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class usersStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public usersStandardScheme getScheme() {
      return new usersStandardScheme();
    }
  }

  private static class usersStandardScheme extends org.apache.thrift.scheme.StandardScheme<users> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, users struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID_SALE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id_sale = iprot.readI32();
              struct.setId_saleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USERNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.username = iprot.readString();
              struct.setUsernameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.password = iprot.readString();
              struct.setPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FIRSTNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Firstname = iprot.readString();
              struct.setFirstnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LASTNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Lastname = iprot.readString();
              struct.setLastnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, users struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_SALE_FIELD_DESC);
      oprot.writeI32(struct.id_sale);
      oprot.writeFieldEnd();
      if (struct.username != null) {
        oprot.writeFieldBegin(USERNAME_FIELD_DESC);
        oprot.writeString(struct.username);
        oprot.writeFieldEnd();
      }
      if (struct.password != null) {
        oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
        oprot.writeString(struct.password);
        oprot.writeFieldEnd();
      }
      if (struct.Firstname != null) {
        oprot.writeFieldBegin(FIRSTNAME_FIELD_DESC);
        oprot.writeString(struct.Firstname);
        oprot.writeFieldEnd();
      }
      if (struct.Lastname != null) {
        oprot.writeFieldBegin(LASTNAME_FIELD_DESC);
        oprot.writeString(struct.Lastname);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class usersTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public usersTupleScheme getScheme() {
      return new usersTupleScheme();
    }
  }

  private static class usersTupleScheme extends org.apache.thrift.scheme.TupleScheme<users> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, users struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId_sale()) {
        optionals.set(0);
      }
      if (struct.isSetUsername()) {
        optionals.set(1);
      }
      if (struct.isSetPassword()) {
        optionals.set(2);
      }
      if (struct.isSetFirstname()) {
        optionals.set(3);
      }
      if (struct.isSetLastname()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetId_sale()) {
        oprot.writeI32(struct.id_sale);
      }
      if (struct.isSetUsername()) {
        oprot.writeString(struct.username);
      }
      if (struct.isSetPassword()) {
        oprot.writeString(struct.password);
      }
      if (struct.isSetFirstname()) {
        oprot.writeString(struct.Firstname);
      }
      if (struct.isSetLastname()) {
        oprot.writeString(struct.Lastname);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, users struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.id_sale = iprot.readI32();
        struct.setId_saleIsSet(true);
      }
      if (incoming.get(1)) {
        struct.username = iprot.readString();
        struct.setUsernameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.password = iprot.readString();
        struct.setPasswordIsSet(true);
      }
      if (incoming.get(3)) {
        struct.Firstname = iprot.readString();
        struct.setFirstnameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.Lastname = iprot.readString();
        struct.setLastnameIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

